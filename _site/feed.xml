<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-18T18:53:45+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">95% Chimp</title><subtitle>Welcome to 95% Chimp... a site with stuff .</subtitle><entry><title type="html">My Perfect 6502</title><link href="http://localhost:4000/6502/retro/2023/07/18/myperfect6502.html" rel="alternate" type="text/html" title="My Perfect 6502" /><published>2023-07-18T18:11:36+01:00</published><updated>2023-07-18T18:11:36+01:00</updated><id>http://localhost:4000/6502/retro/2023/07/18/myperfect6502</id><content type="html" xml:base="http://localhost:4000/6502/retro/2023/07/18/myperfect6502.html"><![CDATA[<p>My current hobby project is to create a 6502 development IDE using the Godot game engine. Part of that process is creating a 6502 emulation core which can be tested against a ‘real’ 6502… enter <a href="https://github.com/mist64/perfect6502">perfect6502</a>.</p>

<p>perfect6502 is a netlist transistor level simulation of a real 6502 CPU, so it’s about as accurate as you’re going to get without hooking up a real 6502 chip to an oscilloscope. Now me being a picky bugger I want perfect6502 to do stuff which it currently doesn’t, and I also want it to run faster… so I thought I’d grab a copy and refactor the hell out of it so that it fits my purpose… enter myperfect6502.</p>

<p>So far I’ve moved to CMake from Make, moved it to C++ and STL containers rather than C and memory buffers… and I’ve managed to squeeze a bit more performance out if it (with more to come). Once I get my head fully around how it works and I’m happy with stuff I’m going to port it to GDScript and make it a Godot addon… well, that’s the plan anyway. Stay tuned…</p>

<p>A happy side-quest for all this is learning how to use gprof and valgrind… which will be a nice bit of experience to pick up. I’ve done a lot of perf work in the day job but that is 99% console based where the tools are all nice and glossy… I’ve not had the urge to do perf work in Linux yet… but now I do. Yay.</p>]]></content><author><name></name></author><category term="6502" /><category term="retro" /><summary type="html"><![CDATA[My current hobby project is to create a 6502 development IDE using the Godot game engine. Part of that process is creating a 6502 emulation core which can be tested against a ‘real’ 6502… enter perfect6502.]]></summary></entry></feed>